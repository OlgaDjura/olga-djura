/*
Задание 1
• Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

• Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

{
title: "Название альбома",
artist: "Исполнитель",
year: "Год выпуска"
}

• Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
• Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)*/

const musicCollection = {
    albums: [
        {
            title: "Детки конфетки",
            artist: "Ранетки",
            year: "2007"
        },
        {
            title: "Анна Асти",
            artist: "Царица",
            year: "2023"
        },
        {
            title: "50 cent",
            artist: "Power Of The Dollar",
            year: "2000"
        }
    ],
    [Symbol.iterator]() {
        let index = 0;
        return {
            next: () => {
                if (index < this.albums.length) {
                    const album = this.albums[index++];
                    return {
                        value: `${album.title} - ${album.artist} (${album.year})`, done: false
                    };
                }
                return { done: true };
            }
        };
    }
};

for (const album of musicCollection) {
    console.log(album);
}



/*Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

Необходимо создать систему управления этими заказами, которая позволит:

• Отслеживать, какой повар готовит какое блюдо.
• Записывать, какие блюда заказал каждый клиент.

Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

Повара и их специализации:

Виктор - специализация: Пицца.
Ольга - специализация: Суши.
Дмитрий - специализация: Десерты.

Блюда и их повара:

Пицца "Маргарита" - повар: Виктор.
Пицца "Пепперони" - повар: Виктор.
Суши "Филадельфия" - повар: Ольга.
Суши "Калифорния" - повар: Ольга.
Тирамису - повар: Дмитрий.
Чизкейк - повар: Дмитрий.

Заказы:

Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
Клиент Ирина заказала: Чизкейк.*/


const chefs = new Map();
chefs.set('Виктор', 'Пицца');
chefs.set('Ольга', 'Суши');
chefs.set('Дмитрий', 'Десерты');

const dishes = new Map();
dishes.set("Пицца 'Маргарита'", "Виктор");
dishes.set("Пицца 'Мясная'", "Виктор");
dishes.set("Суши 'Лава'", "Ольга");
dishes.set("Суши 'Темпура'", "Ольга");
dishes.set("Торт 'Красный бархат'", "Дмитрий");
dishes.set("Пироженное 'Малинка'", "Дмитрий");


const clientOrders = new Map();
const clientAlexey = {name: "Алексей"};
const clientMary = {name: "Мари"};
const clientTom = {name: "Том"};
const clientBobby= {name: "Боби"};

clientOrders.set(clientAlexey, ["Пицца 'Маргарита'", "Торт 'Красный бархат'"]);
clientOrders.set(clientMary, ["Суши 'Лава'", "Пицца 'Мясная'" ]);
clientOrders.set(clientTom, ["Пироженное 'Малинка'", "Суши 'Темпура'"]);
clientOrders.set(clientBobby, ["Торт 'Красный бархат'", "Суши 'Лава'" ]);

function displayOrders() {
    clientOrders.forEach((orders, client) => {
        console.log(`Заказы клиента ${client.name}:`);
        orders.forEach(order => {
            const chef = dishes.get(order);
            console.log(` ${order} - готовит повар ${chef}`);
        });
    });
    
}

displayOrders();
